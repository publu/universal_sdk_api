import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Web3Card.css';

const Web3Card = ({ address }) => {
  const [profileData, setProfileData] = useState(null);

  useEffect(() => {
    const fetchProfileData = async () => {
      try {
        const response = await axios.get(`https://api.web3.bio/profile/${address}`);
        setProfileData(response.data);
      } catch (error) {
        console.error('Error fetching profile data:', error);
      }
    };

    fetchProfileData();
  }, [address]);

  if (!profileData) {
    return <div>Loading...</div>;
  }

  return (
      <div className="profile-card">
        {profileData[0].avatar && (
          <>
            <div className="card-avatar">
              <img alt="Profile Avatar" loading="lazy" width="180" height="180" decoding="async" data-nimg="1" className="avatar" style={{color: 'transparent'}} src={profileData[0].avatar} />
            </div>
            <div className="card-content">
              <div className="card-name">{profileData[0].displayName || profileData[0].address}</div>
              {profileData.find(profile => profile.address.startsWith('0x')) && (
                <div className="card-address" style={{color: 'lightgray'}}>
                  {profileData.find(profile => profile.address.startsWith('0x')).address.slice(0,6)}...{profileData.find(profile => profile.address.startsWith('0x')).address.slice(-4)}
                </div>
              )}
            </div>
          </>
        )}
        <div className="card-content">
          <div className="card-badges">
            {profileData.flatMap(profile => profile.links ? Object.keys(profile.links).map((linkKey, linkIndex) => {
              let badgeColor;
              switch (profile.platform) {
                case 'ENS':
                  badgeColor = 'blue';
                  break;
                case 'lens':
                  badgeColor = 'green';
                  break;
                case 'farcaster':
                  badgeColor = 'purple';
                  break;
                case 'twitter':
                  badgeColor = 'blue';
                  break;
                default:
                  badgeColor = 'gray';
              }
              let BadgeIcon;
              switch (badgeColor) {
                case 'blue':
                  BadgeIcon = () => (<svg fill="#5298FF" height="20" viewBox="0 0 32 32" width="20" xmlns="http://www.w3.org/2000/svg" class="icon mr-1"><path d="m5.7592 7.55037c.30026-.55738.73349-1.03257 1.26171-1.38361l8.86329-6.16676-9.08157 14.9623s-.79345-1.3361-1.10301-2.0121c-.38558-.85-.58007-1.7737-.5698-2.7065.01027-.93276.22512-1.85203.62938-2.69333zm-3.65802 10.32143c.10009 1.4308.50582 2.8238 1.19009 4.0857.68417 1.262 1.63113 2.3637 2.77739 3.2314l9.80364 6.8111s-6.13378-8.8074-11.30729-17.5713c-.52382-.9259-.87594-1.9383-1.03952-2.9885-.0724-.4756-.0724-.9594 0-1.435-.13492.2491-.39673.759-.39673.759-.5246 1.0659-.8819 2.2058-1.05938 3.3799-.10214 1.2409-.09148 2.4886.0318 3.7277zm24.99522 1.1858c-.3175-.6759-1.1031-2.0121-1.1031-2.0121l-9.0656 14.9545 8.8633-6.1628c.5281-.3511.9615-.8262 1.2617-1.3836.4043-.8414.619-1.7606.6294-2.6933.0103-.9328-.1842-1.8566-.5699-2.7066zm3.5984-4.9255c-.1001-1.4307-.5058-2.8238-1.19-4.0857-.6843-1.26192-1.6312-2.36366-2.7775-3.23128l-9.7878-6.81512s6.1298 8.80737 11.3074 17.5713c.5224.9262.8731 1.9385 1.0355 2.9885.0724.4756.0724.9594 0 1.435.1349-.2491.3967-.759.3967-.759.5246-1.0659.8819-2.2058 1.0593-3.3799.1035-1.2409.0942-2.4885-.0277-3.7277z"></path></svg>); // replace with blue SVG
                  break;
                case 'green':
                  BadgeIcon = () => (<svg width="20" height="20" viewBox="0 0 32 32" fill="#6bc674" xmlns="http://www.w3.org/2000/svg" class="icon mr-1"><path fill-rule="evenodd" clip-rule="evenodd" d="M22.0292 11.3357C23.3409 10.2413 24.8043 9.82497 26.2077 9.93024C27.7048 10.0425 29.0901 10.7442 30.1249 11.7635C31.1594 12.7828 31.8702 14.1462 31.984 15.6176C32.0988 17.1025 31.6016 18.6576 30.2909 20.0224C30.1711 20.1482 30.0486 20.2722 29.9234 20.3947C23.9781 26.2511 16.0808 26.2666 16 26.2666H15.9996C15.9593 26.2666 8.03691 26.2663 2.07629 20.3941L2.07501 20.3926C1.95195 20.2707 1.83077 20.1479 1.7114 20.0245L1.71045 20.0233C0.399076 18.6597 -0.0985585 17.1049 0.0158883 15.6201C0.129292 14.1489 0.839608 12.7854 1.87395 11.7657C2.90821 10.7461 4.29343 10.0438 5.79075 9.93101C7.19409 9.82533 8.65776 10.2412 9.97008 11.335C10.1112 9.64793 10.8464 8.33492 11.9136 7.43225C13.0517 6.4695 14.535 6 15.9997 6C17.4644 6 18.9476 6.4695 20.0857 7.43225C21.153 8.33504 21.8883 9.64829 22.0292 11.3357ZM16.2718 25.6729L16.2716 25.6655H16.2721L16.2718 25.6729ZM15.7275 25.6729L15.7273 25.6655H15.7278L15.7275 25.6729ZM20.4663 17.5408C20.3036 17.5408 20.2473 17.7722 20.351 17.8948C20.5346 18.1119 20.6451 18.3913 20.6451 18.696C20.6451 19.3876 20.0762 19.9482 19.3743 19.9482C18.6723 19.9482 18.1032 19.3876 18.1032 18.696C18.1032 18.659 18.0542 18.6407 18.0321 18.6706C17.8316 18.9419 17.6963 19.2464 17.6406 19.5661C17.6094 19.7461 17.4608 19.8955 17.2741 19.8955H17.1711C16.9274 19.8955 16.7265 19.7008 16.7624 19.465C17.0089 17.8493 18.6252 16.6775 20.4663 16.6775C22.3073 16.6775 23.9236 17.8493 24.17 19.465C24.2058 19.7008 24.0049 19.8955 23.7614 19.8955C23.5176 19.8955 23.3248 19.6998 23.2718 19.4671C23.0309 18.4081 21.9139 17.5408 20.4663 17.5408ZM9.17953 18.696C9.17953 18.6472 9.11534 18.621 9.08512 18.6599C8.87083 18.9354 8.72482 19.2473 8.66301 19.5761C8.62653 19.7703 8.46615 19.9318 8.26432 19.9318H8.18868C7.94506 19.9318 7.74409 19.7372 7.78001 19.5015C8.02636 17.8849 9.64284 16.714 11.4838 16.714C13.3248 16.714 14.9413 17.8849 15.1876 19.5015C15.2236 19.7372 15.0226 19.9318 14.7789 19.9318C14.5354 19.9318 14.3424 19.7363 14.2895 19.5036C14.0487 18.4439 12.9317 17.5772 11.4838 17.5772C11.3522 17.5772 11.304 17.7593 11.3921 17.8549C11.5968 18.0772 11.7216 18.3723 11.7216 18.696C11.7216 19.3876 11.1525 19.9482 10.4506 19.9482C9.74858 19.9482 9.17953 19.3876 9.17953 18.696ZM17.4136 21.7159C17.5858 21.5472 17.8519 21.4652 18.0657 21.5794C18.2795 21.6938 18.3606 21.9591 18.2065 22.1439C17.7047 22.745 16.8923 23.1262 15.9963 23.1262C15.1007 23.1262 14.2865 22.7492 13.7841 22.1433C13.6306 21.9582 13.7127 21.6929 13.9269 21.5794C14.1411 21.4658 14.4067 21.549 14.5787 21.7177C14.9099 22.0431 15.4124 22.2631 15.9963 22.2631C16.5786 22.2631 17.0817 22.0407 17.4136 21.7159Z"></path></svg>); // replace with green SVG
                  break;
                case 'purple':
                  BadgeIcon = () => (<svg fill="#8a63d2" height="20" viewBox="0 0 32 32" width="20" xmlns="http://www.w3.org/2000/svg" class="icon mr-1"><path clip-rule="evenodd" d="m6.72861 3.03262c-.05183.03293-.07239.49493-.08337 1.87494l-.01473 1.83131-2.29261.01445c-1.49367.00945-2.29261.03404-2.29261.07058 0 .09865.38919 1.77142.44241 1.90162.0282.06891.13088.46866.22815.88842.20633.89076.18646.86636.7214.88776.28943.0115.41267.0375.40878.086-.00305.0382-.00931 3.3839-.01389 7.4348l-.00834 7.3653-.15284.0613c-.61094.2451-.70056.389-.73641 1.1824l-.02779.6158-.1791.0579c-.54453.1759-.74851.5353-.726 1.2788l.01584.5274 4.43238-.0006c2.43781-.0004 4.51992-.0008 4.62692-.0011l.1945-.0005v-.5864c0-.7903-.148-1.0523-.6742-1.1941-.1182-.0318-.216-.0882-.217-.1252-.03-1.0041-.0432-1.1393-.1267-1.2995-.1077-.2064-.36863-.4074-.52898-.4074-.28372 0-.27483.1519-.25149-4.3169.02307-4.4298.03057-4.5612.30929-5.3816.79158-2.3292 2.74368-3.9726 5.24398-4.4145.8626-.1525 2.405-.007 2.9833.2815.0531.0264.1357.048.1838.048.142 0 .9649.4137 1.4169.7121 1.1625.768 2.2548 2.2155 2.6081 3.4563.0392.1376.1042.3627.1445.5002.1623.5532.1906 1.3086.1908 5.0961l.0001 3.8458-.1235.0864c-.0679.0477-.1594.0866-.2031.0866-.3687 0-.6182.4689-.6182 1.1617v.5561l-.2633.1164c-.5516.244-.6815.482-.6815 1.2486 0 .4673.0115.5299.0972.5305 2.2446.0155 9.1502-.0074 9.1876-.0305.0287-.0177.0518-.2498.0511-.5154-.0018-.7374-.2137-1.0966-.7285-1.2353l-.2151-.0579-.001-.5675c-.0012-.8-.2053-1.1143-.8298-1.2776l-.114-.0299v-7.4527-7.4527l.4029-.0008c.5714-.0013.5195.0895.9355-1.63875.0884-.36682.2128-.85452.2764-1.08378.1917-.68987.2254-.84882.1958-.9258-.0225-.05877-.478-.07628-2.295-.08795l-2.2668-.01445-.0278-1.86188-.0277-1.86188-9.2538-.0132c-5.0896-.00722-9.2847.00667-9.32249.03071z" fill-rule="evenodd"></path></svg>); // replace with purple SVG
                  break;
                case 'gray':
                  BadgeIcon = () => (<svg></svg>); // replace with gray SVG
                  break;
                default:
                  BadgeIcon = () => (<svg></svg>); // replace with default SVG
              }
              return (
                <a key={linkIndex} className={`platform-badge ${badgeColor}`} title={`${profile.identity} ${profile.platform}`} href={profile.links[linkKey].link} target="_blank" rel="noopener noreferrer">
                  <div className="platform-badge-icon">
                    <BadgeIcon />
                  </div>
                  <span className="platform-badge-name">{profile.links[linkKey].handle}</span>
                </a>
              );
            }) : []).filter((badge, index, self) =>
              index === self.findIndex((b) => (
                b.props.children[1].props.children === badge.props.children[1].props.children
              ))
            )}
          </div>
        </div>
      </div>
  );
};

export default Web3Card;

